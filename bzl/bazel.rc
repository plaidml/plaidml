build -c opt
test -c opt
run -c opt

build --spawn_strategy=standalone
test --spawn_strategy=standalone
run --spawn_strategy=standalone

build --genrule_strategy=standalone
test --genrule_strategy=standalone
run --genrule_strategy=standalone

build --announce_rc
build --nolegacy_external_runfiles
build --distinct_host_configuration=false
build:ro --remote_upload_local_results=false
build --enable_platform_specific_config

build --action_env=LC_ALL # This is to allow plaidbench to work on *nix under python3
build --action_env=LANG # This is to allow plaidbench to work on *nix under python3
build --action_env=NO_PROXY
build --action_env=HTTP_PROXY
build --action_env=HTTPS_PROXY
build --action_env=no_proxy
build --action_env=http_proxy
build --action_env=https_proxy

build --define=version=0.0.0.dev0
test --test_timeout_filters=-eternal
#test --test_output=streamed
test --test_env=HOME
test --test_env=PLAIDML_DEVICE
test --test_env=PLAIDML_TARGET
test --test_env=PLAIDML_SETTINGS
test --test_sharding_strategy=disabled
run --test_env=HOME
run --test_env=PLAIDML_DEVICE
run --test_env=PLAIDML_TARGET
run --test_env=PLAIDML_SETTINGS
run --test_sharding_strategy=disabled

build:dbg -c dbg

build:llvm --incompatible_enable_cc_toolchain_resolution
build:llvm --define=compiler=clang

build:linux --cpu=linux_x86_64
build:linux --crosstool_top=//toolchain:toolchain
build:linux --cxxopt=-std=c++17
build:linux --define=compiler=gcc
build:linux --host_crosstool_top=//toolchain:toolchain
build:linux --build_tag_filters=-latex,-macos,-pytorch,-skip_linux,-windows
test:linux --test_tag_filters=-latex,-macos,-pytorch,-skip_linux,-windows

build:macos --apple_platform_type=macos
build:macos --cpu=darwin_x86_64
build:macos --cxxopt=-std=c++17
build:macos --define=compiler=clang
build:macos --build_tag_filters=-large,-linux,-skip_macos,-windows
test:macos --test_tag_filters=-large,-linux,-skip_macos,-windows

build:windows --enable_runfiles
build:windows --cxxopt=/std:c++17 --cxxopt=/Zc:__cplusplus --cxxopt=/wd4624
build:windows --define=compiler=msvc
build:windows --build_tag_filters=-docs,-latex,-linux,-macos,-pytorch,-skip_windows
build:windows --action_env=NUMBER_OF_PROCESSORS
build:windows --action_env=PLAIDML_SETTINGS
build:windows --action_env=KMP_DUPLICATE_LIB_OK=TRUE
test:windows --enable_runfiles
test:windows --test_tag_filters=-docs,-latex,-linux,-macos,-pytorch,-skip_windows
test:windows --test_env=NUMBER_OF_PROCESSORS
test:windows --test_env=PATHEXT
test:windows --test_env=USERPROFILE

build:callgrind -c dbg
build:callgrind --cxxopt=-O3
build:callgrind --define=with_callgrind=true
run:callgrind --run_under='valgrind --quiet --tool=callgrind'

run:lldb --run_under='lldb --'
run:py_lldb --run_under='lldb python --'
run:gdb --run_under='gdbserver :2345'
run:valgrind --run_under='valgrind'

# Basic ASAN/UBSAN that works for gcc
build:asan -c dbg
build:asan --copt -fsanitize=address,undefined
build:asan --copt -fno-sanitize=vptr
build:asan --linkopt -fsanitize=address,undefined
build:asan --linkopt -fno-sanitize=vptr
build:asan --linkopt -ldl
build:asan --copt -Wno-macro-redefined
build:asan --copt -D_FORTIFY_SOURCE=0
build:asan --copt -DADDRESS_SANITIZER=1
build:asan --copt -D__SANITIZE_ADDRESS__
build:asan --define tcmalloc=disabled
build:asan --define signal_trace=disabled
run:asan --test_env=ASAN_ENABLE=1
run:asan --test_env=ASAN_OPTIONS
run:asan --test_env=ASAN_SYMBOLIZER_PATH
run:asan --test_env=DYLD_INSERT_LIBRARIES
test:asan --test_env=ASAN_ENABLE=1
test:asan --test_env=ASAN_OPTIONS
test:asan --test_env=ASAN_SYMBOLIZER_PATH
test:asan --test_env=DYLD_INSERT_LIBRARIES

# For building tensorflow
build --define=no_aws_support=true
build --nocheck_visibility
common --experimental_repo_remote_exec
