syntax = "proto3";

package vertexai.tile.proto;

// Encapsulates a tensor of arbitrary dimensionality and data type
message TensorShape {
  // The format of the data in the tensor, integers must be LE, floats IEEE
  enum DataType {
    UNKNOWN_TYPE = 0;
    BOOLEAN = 2;
    INT8 = 16;
    INT16 = 17;
    INT32 = 18;
    INT64 = 19;
    INT128 = 20;
    UINT8 = 32;
    UINT16 = 33;
    UINT32 = 34;
    UINT64 = 35;
    FLOAT16 = 49;
    FLOAT32 = 50;
    FLOAT64 = 51;
    BFLOAT16 = 56;
    PRNG = 64;
  }

  message Dimension {
    // The number of elements in a given dimension, inclusive of padding
    uint64 size = 1;

    // The stride for this dimension, inclusive of all suboridnal dimension, in
    // elements.
    int64 stride = 2;
  }

  // The data type of each element in the shape.
  DataType type = 1;

  // An optional codec used for computing the physical size of a tensor.
  string codec = 2;

  // Specifications of the dimensions, starting with the outermost dimension.
  // (ordinal 0 is the outermost, ordinal N-1 is the innermost)
  // Memory must be layed in the order of the specified dimension, e.g.,
  // given an INT16 rank 2 tensor with size (13,6) and stride (16,8), the
  // first 26 bytes will contain the first dimension along ordinal 0 of the
  // second dimension, the next 6 bytes will be padding, then ordinal 1, etc.
  //
  // A tensor with no dimensions (i.e, rank 0) is valid and is considered a
  // scalar.
  repeated Dimension dims = 3;

  // Declares whether a tensor is ever written to or updated.
  // An example of an is_const tensor is the weights of a NN during inference.
  bool is_const = 4;

  // An optional layout for the tensor. If not specified, it is inferred.
  string layout = 5;
}
