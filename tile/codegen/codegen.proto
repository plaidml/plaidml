// Copyright 2018, Intel Corporation

syntax = "proto2";

package vertexai.tile.codegen.proto;

import "google/protobuf/any.proto";
import "tile/stripe/stripe.proto";

// The Configs message is the main message for the pmlc config file.
// A collection of named configs are defined.
message Configs {
  map<string, Config> configs = 1;
}

// A Config contains a collection of stages.
message Config {
  map<string, Stage> stages = 1;
}

// A stage contains a collection of optimization passes.
message Stage {
  repeated Pass passes = 1;
}

// The optimization of stripe is done via a series of passes, each which
// perform various modifications.  To help determine which blocks a given pass
// will operate on, stripe statements, refinements, and indexes can be given
// 'tags', which can be used by later passes as a matching criteria.  Any object
// can be given any number of tags (i.e. they act as a set of symbol).  Tags
// are purely used for managing inter-pass interactions or for other operations
// such as lowering and have no semantic effect on the meaning of the stripe
// code that is tagged.  Each pass acts on some set of blocks, typically those
// which match the associated tags requirements, as well as any additional pass
// specific criteria.  The pass typically will transform the matching block in
// some way, and possibly add additional tags.
message Pass {
  // The name of the pass is programmer convenience used in various debugging
  // messages but it otherwise has no semantic meaning.
  required string name = 1;

  // The pass itself.
  required google.protobuf.Any pass = 2;
}

// Dead code elimination
message DeadCodeEliminationPass {
  repeated string reqs = 1;
  optional bool fix_deps = 2;
}

// The compute_deps pass determines which statements within a block
// depend on which others via data-flow and sets the deps field on the
// statements.
message ComputeDepsPass {
  repeated string reqs = 1;
}

// Expand the size of buffers to reduce constraints required.
message PadPass {
  repeated string reqs = 1;
  // Modify the prime dimension greater than prime_threshold
  optional uint32 prime_threshold = 2 [default = 32];
}

// Automatic stencil pass in MLIR
message MLIR_AutoStencilPass {
  repeated string reqs = 1;
  // Startup cost for each thread
  required int32 startup_cost = 2;
  // Whether tiles of (M, N, K) is only even
  repeated bool only_even = 3;
  // Whether tiles of (M, N, K) is only power of two
  repeated bool only_po2 = 4;
  // Special stencils
  repeated Stencil special_stencils = 5;
}

// Aggregate initialization pass in MLIR
message MLIR_AggInitPass {
  repeated string reqs = 1;
  optional bool parallel = 2 [default = true];
  optional uint32 cache_line = 3 [default = 64];
}

// A No-op pass to test MLIR transcoding
message MLIR_NopPass {
}

// Expand the size of buffers to reduce constraints required.
message MLIR_PadPass {
  repeated string reqs = 1;
  // Modify the prime dimension greater than prime_threshold
  optional uint32 prime_threshold = 2 [default = 32];
}

// Reorder blocks
message ReorderBlocksPass {
}

// The scalarize pass looks for refinements which (usually due to
// localization) now hold only a single element, and replaces
// loads/stores to the buffers with scalars, inducing temporaries as
// needed to achieve SSA form.  Also remove the unused buffers.
message ScalarizePass {
  repeated string reqs = 1;
}

// PruneIndexes removes unused indexes
message PruneIndexesPass {
  repeated string reqs = 1;
}

// PruneRefinements removes unused references
message PruneRefinementsPass {
  repeated string reqs = 1;
}

// The schedule pass begins on any blocks whose tags match the tags in reqs.
// It then attempts to schedule and place the statements in that block (which
// must be blocks or specials) with the assumption that only mem_KiB killobytes
// may be resident at any given time.  It may introduce synthetic dependencies
// to the statement list to enforce this.  It also adds all the required local
// memory buffers, and arranges for loading and spilling to/from the local
// buffers.
message SchedulePass {
  // Do scheduling to the blocks that match this these tags
  repeated string reqs = 1;
  // The location to specify for the local memory buffers generated
  // during the scheduling process.  During assignment, the location
  // will be partially evaluated with the variable "unit" set to be
  // the assigned memory unit.
  required stripe.proto.Location mem_loc = 2;
  // The size of the local memory available to scheduling.
  required uint64 mem_KiB = 3;
  // The minimal buffer alignment requirement.
  required uint32 alignment = 4;
  // The location to assign to the blocks used to do transfer between local
  // memory and exterior memory, i.e. the DMA device used to load / spill.
  // See also swap_in_tags and swap_out_tags below
  required stripe.proto.Location xfer_loc = 5;
  // The memory assignment algorithm to use.
  oneof mem_assignment_algorithm {
    ColorIOUnique color_io_unique = 6;
    NumaMap numa_map = 7;
  }
  // Add constraints during load/store to prevent OOB access
  optional bool add_constraints = 8 [default = true];

  // ColorIOUnique requires that each input to a sub-statement be
  // assigned a unique color, and that each output to a sub-statement
  // be assigned a unique color, where a color indicates a particular
  // memory.
  message ColorIOUnique {
    // The memory units to use for the unique color memory assignment algorithm.
    repeated uint32 units = 1;
  }

  // NumaMap maps the location of a block accessing outer memory to
  // the cache units that the block can access.
  message NumaMap {
    message Node {
      required string pattern = 1;
      repeated uint32 units = 2;
    }

    repeated Node nodes = 1;
  }

  optional bool append_devs = 9 [default = false];

  optional uint32 parallelism_window = 10;
  // Tags to add to the transfer blocks
  repeated string swap_in_tags = 11;
  repeated string swap_out_tags = 12;
}

// Provide a specific address for all the allocation refinement such that no
// refinement that can be used simultaneously (based on statement dependencies)
// can ever overlap.  There is an implied assumption used by this place not
// present elsewhere that the interior of a block is sequentially executed
// across each index.
message MemoryPlacementPass {
  // Do memory placement for blocks that match there tags
  repeated string reqs = 1;
  // Skip placing Refinements marked with a tag contained in the list below.
  repeated string skip_tags = 2;
  // The mimimal buffer aligment requirement.
  required uint32 alignment = 3;
  // Only place buffers assigned to this hardware location.
  repeated stripe.proto.Location locs = 4;
}

// For each refinement going into or out of a given block (as per dirs), add a
// newly allocated local refinement in a 'closer' memory, and transfer into /
// out of that block before / after the rest of the block interior, and move
// any accesses to the outer reference to point at the newly allocated buffer.
// In other words: Load the working set into a smaller local cache.
message CachePass {
  // Do the caching pass on blocks that match there tags
  repeated string reqs = 1;
  // The compute block for reference
  required string ref = 2;
  // Cache only inputs, only outputs, or both
  repeated stripe.proto.Refinement.Dir dirs = 3;
  // The location to assign to the 'cache' memory allocated
  required stripe.proto.Location mem_loc = 4;
  // The unit to assign to transfer (DMA) data into / out of the cache
  required stripe.proto.Location xfer_loc = 5;
  // Add constraints during load/store to prevent OOB access
  optional bool add_constraints = 6 [default = true];
  // Whether reorder the cache block index in order
  optional bool reorder_idx = 7 [default = true];
  // Whether make the dim sizes be odd for cached refinements
  optional bool odd_size = 8 [default = false];
  // The multipe limit of odd_size / original size
  optional double odd_limit = 9 [default = 2.0];
}

// Use registers instead of local memory as cache.
message RegisterCachePass {
  // Do the register pass on blocks that match there tags
  repeated string reqs = 1;
  // The candidate refinement's location should be local_loc
  required stripe.proto.Location local_loc = 2;
  // The candidate may be load into regsiter_loc
  required stripe.proto.Location register_loc = 3;
  // The size of register file in bytes
  required uint32 register_size = 4;
  // The latency of global memory access
  required uint32 global_memory_latency = 5;
  // The latency of local memory access
  required uint32 local_memory_latency = 6;
  // The latency of register access
  required uint32 register_latency = 7;
  // The direction of the target refinement
  required stripe.proto.Refinement.Dir dir = 8;
  // The tag of the parent of the computational block
  required string comp_parent_tag = 9;
  // The aligned size for the arch
  required uint32 align_size = 11;
}

// Vectorization pass using intrinsic block read/write
message VectorizePass {
  repeated string reqs = 1;
  repeated string ref_reqs = 2;
  optional uint32 read_align_bytes = 3;
  optional uint32 write_align_bytes = 4;
}

// Process large fully connected layer
message FullyConnectedPass {
  // Only the fully connected blocks match this tag
  repeated string reqs = 1;
  // Process only the refinements larger than threshold
  required uint64 threshold = 2;
  // The error for treating a value as zero
  required double zero_error = 3;
  // The possible subgroup sizes in ascending order
  repeated uint32 subgroup_sizes = 4;
}

// The fusion pass attempt to combine compatible block into a single block that
// walks over and outer index space and then multiple inner blocks that do each
// part of the original computation.  By doing so, it means that the working set
// for each portion of the computation may not need to be sent to further away
// and larger memory, and large temporary buffers may be reduced (via localize)
// or even eliminated (via scalarize).  The fusion pass may perform non-trivial
// modification to the indexing of the blocks to make them match.
message FusionPass {
  // Only consider fusing blocks whose parents match this tag
  repeated string parent_reqs = 1;
  // Require the first (a) block to match these tags
  repeated string a_reqs = 2;
  // Require the second (b) block to match these tags
  repeated string b_reqs = 3;
  // Set additional tags on the resulting fused block
  repeated string fused_set = 4;
  // Exclude some set of blocks based on tags
  repeated string exclude = 5;
  // Only fuse if all block indexes are exactly 1 to 1
  optional bool perfect = 6 [default = false];
  // Only fuse if output sizes match
  optional bool output_match = 7 [default = false];
  // Whether allowing inner block for the fused block
  optional bool no_inner = 8 [default = false];
  // Remove tags for inner blocks
  repeated string inner_remove_set = 9;
  // Whether allowing inner constraints after fusion
  optional bool no_constraints = 10 [default = false];
  // New tags for the first inner block
  repeated string a_inner_set = 11;
  // New tags for the second inner block
  repeated string b_inner_set = 12;
  // Limit of number of refinements
  optional uint32 max_refs = 13 [default = 1024];
}

// A localize pass detects allocations (refinements with dir = None)
// which are only used in a single inner block, and moves the
// allocation into the inner block, shrinking it if possible, since
// often only a portion of the buffer is used for each index position.
// Repeated recursively.
message LocalizePass {
  repeated string reqs = 1;
  repeated string ref_reqs = 2;
}

// Edit the location of refinements to match 'loc'
message LocateMemoryPass {
  repeated string reqs = 1;
  required stripe.proto.Location loc = 2;
  optional bool append_devs = 3 [default = false];
}

// Edit the location of blocks to match 'loc'
message LocateBlockPass {
  repeated string reqs = 1;
  required stripe.proto.Location loc = 2;
  optional bool append_devs = 3 [default = false];
}

// Edit the location of blocks within some tagged blocks to match 'loc'
message LocateInnerBlockPass {
  repeated string reqs = 1;
  repeated string inner_reqs = 2;
  required stripe.proto.Location loc = 3;
  optional bool append_devs = 4 [default = false];
}

// Edit the location of blocks within some tagged blocks to match 'loc'
message LocateBlocksRefinementsRecursivelyPass {
  repeated string reqs = 1;
  required stripe.proto.Location loc = 2;
  repeated string skip_tags = 3;
}

// Initiaslizes the output of an agg_XXXXX block to the appropriate
// value for the respective operations (valid values for XXXXX
// are sum, mul, min, max and <emoty string>)
message AggregationBlockOutputInitializationPass {
  repeated string reqs = 1;
}

// The stencil pass attempts to rewrite blocks to contain an inner block that
// matches a fixed hardware 'Stencil' or set of stencils.  Basically, we presume
// that the hardware has one or more built-in 'indexes' (which may exist over
// time or actual be parallel hardware).  We then try to match indexes or
// regions of indexes of a block to the various hardware indexes, and rewrite
// the block into an outer block that make multiple calls to a fixed, hardware
// appropriate, inner block.
message StencilPass {
  // Only stencil blocks that make these tags
  repeated string reqs = 1;
  // Attempt to match the list of stencils below, picking the lowest cost
  // stencil
  repeated Stencil stencils = 2;
  // Set the following tags on the outer loop
  repeated string outer_set = 3;
  // Set the following tags on the inner set (the stencil match)
  repeated string inner_set = 4;
  // Set the following tags on input refinements (in stencil index ins order)
  repeated StencilTagList inputs_set = 5;
  // Set the following tags on output refinements (in stencil index outs order)
  repeated StencilTagList outputs_set = 6;
  // Makes the stencil use strict dimension sizes.
  // The size is cosidered being a match for the strict requirement if
  // the block.shape[dim] % tile[dim] == 0 for all dimensions.
  optional bool is_strict_dims = 7 [default = false];
  optional bool copy_tags = 8 [default = false];
}

message Stencil {
  // An initial cost of the stencil
  required uint64 startup_cost = 1;
  // The set of required index matches
  repeated StencilIndex idxs = 2;
}

message StencilIndex {
  // The name of the stencil
  required string name = 1;
  // The size of the HW unit, or -1 if the HW is flexible for this dimension
  required int32 size = 2;
  // For each output, the required stride, typically there are:
  // 0 for 'index not used on output'
  // 1 for 'index must be stride 1 in memory (contiguous)
  // -1 for 'index may be any stride'
  repeated int32 outs = 3;
  // For each input, the required stride, same as above
  repeated int32 ins = 4;
}

message StencilTagList {
  repeated string tags = 1;
}

// The autotile pass attempts to split (tile) a block into an outer block and
// an inner block, such that the working set of the inner block fits within a
// limited memory size, which maximizing the computational density of the inner
// block (the ratio of compute to memory I/O).  The goal of this pass is to
// allow all memory use within the inner block to be from a faster local
// memory.  If the system in question has a cache hierarchy, the autotile pass
// itself is sufficient.  If the memory management is explicit, DMA transfers
// may be inserted by performing a cache pass on the inner tile.  Memory I/O is
// measured in 'cache line misses' via a model which assumes a specific cache
// width, so that contiguous access is preferred over disjoint access.
message AutotilePass {
  // Autotile blocks whose tags contain reqs
  repeated string reqs = 1;
  // Set the following tags on the outer block post tiling
  repeated string outer_set = 2;
  // Set the following tags on the inner block post tiling
  repeated string inner_set = 3;
  // Only consider tilings whose sizes are powers of two.  This is much faster
  // and for many use cases the only reasonable options
  optional bool only_po2 = 4 [default = false];
  // Only consider even tilings
  optional bool only_even = 5 [default = false];
  // Do a hill climbing search rather than a complete search.
  optional bool fast = 6 [default = false];
  // Ignore 1-dimensional tensors when considering memory IO.
  optional bool skip_1d = 7 [default = false];
  // The maximum amount of memory use (in bytes) for all the outputs written by
  // the inner block.  0 means no limit.
  optional int64 max_output_size = 8 [default = 0];
  // The maximum amount of memory use (in bytes) for all the inputs read by
  // the inner block.  0 means no limit.
  optional int64 max_input_size = 9 [default = 0];
  // The maximum amount of memory use (in bytes) for each output written by
  // the inner block.  0 means no limit.
  optional int64 max_per_output_size = 10 [default = 0];
  // The maximum amount of memory use (in bytes) for each input read by
  // the inner block.  0 means no limit.
  optional int64 max_per_input_size = 11 [default = 0];
  // The total size (in bytes) of all data used by the inner block.  Note, this
  // is generally the place to put a memory limit, but in some architectures
  // inputs are held in one memory and outputs are held in accumulation
  // registers in a separate memory.  0 means no limit.
  optional int64 max_total_size = 12 [default = 0];
  // The maximal  number of inner loops allowed by the inner block.  0 means no
  // limit.
  optional int64 max_sizes_product = 13 [default = 0];
  // The multiplier for output I/O cost (in case input + output are not
  // symmetric)
  optional double output_cost = 14 [default = 1.0];
  // The multiplier for input I/O cost (in case input + output are not
  // symmetric)
  optional double input_cost = 15 [default = 1.0];
  // Should we copy the tags of the original block to the inner block
  optional bool copy_tags = 16 [default = false];
  // When considering memory I/O, what is the size (in byte) of the cache line
  optional int64 cache_width = 17 [default = 0];
  // When the result of autotile is trivial (either whole loops fits into inner
  // memory or only 1 element fits), should we skip the transform?
  optional bool elide_trivial = 18 [default = false];
  // Only consider refinement from this memory location when computing memory
  // I/O
  optional string loc_name = 19 [default = ""];
  // Clear the tags of the original / outer block before adding outer_set
  optional bool clear_outer = 20 [default = false];
  // Set to false to allow only parallel safe tilings
  optional bool acc_idxs = 21 [default = true];
  // Clear the location the original / outer block
  optional bool clear_location = 22 [default = false];
  // 'Flip' the resulting tile to interleaved rather than contigous version.
  optional bool flip = 23 [default = false];
  // Specify the minimum size of tiles to get full utilization
  optional int64 min_size = 24 [default = 1];
  // Specify the minimum size of tile outputs to get full utilization
  optional int64 min_out_size = 25 [default = 1];
  // Specify the minimum count of tiles to get full utilization
  optional int64 min_count = 26 [default = 1];
  // Reject tilings with more than this number of tiles
  optional int64 max_count = 27 [default = 0];
  // Specify the minimum count of output tiles to get full utilization
  optional int64 min_out_count = 28 [default = 1];
  // Specify the 'tie-breaker' multiplier on having more tiles
  // Note, we do log2(num_tiles) to make this less impactful
  // Positive means more tiles = bad, negative means more tiles = good
  optional double split_factor = 29 [default = .001];
  // If the inner tile sizes are odd
  optional bool odd_size = 30 [default = false];
  // The maximal  number of inner loops allowed by the inner block,
  // where each index is rounded up to the nearest power of 2
  // 0 means no limit.
  optional int64 max_po2_product = 31 [default = 0];
  // Only consider tilings whose sizes are multiples of 32.
  // This is primarily required for some arch.
  optional bool only_multiple_of_32 = 32 [default = false];
  // If set, build a tile index affine (an affine of the tiled indices
  // that will expand to [0..tile_count)), and use it to evaluate the
  // block's location, expanding the supplied tag as the tile index
  // affine.
  optional string location_idx_tag = 33;
  // If failed, tile the whole block into inner, and set the following tags for
  // inner block
  repeated string fail_inner_set = 34;
  // If failed, tile the whole block into inner, and set the following tags for
  // outer block
  repeated string fail_outer_set = 35;
  // Exclude some set of blocks based on tags
  repeated string exclude = 36;
  // If the tiling is interleaved
  optional bool interleave = 37;
  // Only the primes <= small_factor_upbound are counted as small factors
  optional uint32 small_factor_upbound = 39 [default = 0];
}

// A pass that attempts to transpose intermediate buffers such that any
// 'accumulation indexes', which are defined as indexes which are not used on
// the output of a contraction, are moved to be 'stride-1'.  TODO: Make this
// pass transpose based on a wider variety of cost functions.  Currently it is
// only really useful on one architecture.
message TransposePass {
  // Transpose only refinements in blocks whose tags contain reqs
  repeated string reqs = 1;
  // Require the following tags in the allocating refinement.
  repeated string alloc_reqs = 2;
}

// The partition compute pass splits a single block into an 'outer'
// and inner block so that it can be distributed across multiple
// symmetric hardware slices, with the compute elements sharing
// memory.
message PartitionComputePass {
  // Partition blocks whose tags match reqs
  repeated string reqs = 1;
  // Set additional tags on the partitioned blocks
  repeated string set_tags = 2;
  // How many parts should be partition each block into
  required int64 num_parts = 3;
  // Apply tags to any indexes split by partitioning
  optional string idx_tag = 4;
  // Only consider tilings whose sizes are multiples of 32.
  // This is primarily required for some arch.
  optional bool only_multiple_of_32 = 5 [default = false];
}

// The partition pass splits a single block into an 'outer' and inner block so
// that it can be distributed across multiple symmetric hardware slices.  There
// are two type of partition passes, based on whether the compute elements
// shared memory or not.
message PartitionMemoryPass {
  // Partition blocks whose tags match reqs
  repeated string reqs = 1;
  // Set additional tags on the partitioned blocks
  repeated string set_tags = 2;
  // How many parts should be partition each block into
  required int64 num_parts = 3;
  // Apply tags to any indexes split by partitioning
  optional string idx_tag = 4;
  // Only consider tilings whose sizes are multiples of 32.
  // This is primarily required for some arch.
  optional bool only_multiple_of_32 = 5 [default = false];
}

// Unroll a given block, similar to a loop unrolling in a traditional compiler.
message UnrollPass {
  // Unroll blocks whose tags match reqs
  repeated string reqs = 1;
  // Expand (unroll) only specific indexes
  optional string expand_idx = 2;
  // During unrolling, should we add additional refinements (views) for each
  // refinement region used by the unrolled statements?
  optional bool make_views = 3 [default = false];
  // A string to append to each unrolled block's name for debugging purposes
  optional string part_name = 4;
}

// The threading pass assigns elements of a dense computational block to
// 'threads' for use in flexible semi-SIMD architectures such as a GPU, where a
// single instruction decoder is shared across multiple threads.  Currently
// this pass is somewhat GPU specific.
message ThreadInnerPass {
  // Thread blocks whose tags match reqs
  repeated string reqs = 1;
  // How many threads should be introduce during threading
  required int64 threads = 2;
  // Set the following tags on the outer block post tiling
  repeated string outer_set = 3;
  // Set the following tags on the inner block post tiling
  repeated string inner_set = 4;
  // Exclude some set of blocks based on tags
  repeated string exclude = 5;
}

// Assign a codec to matching refinements. A codec defines the physical layout
// of a tensor on a particular hardware device.
message AssignCodecPass {
  // Only assign this codec to the following data types.
  repeated string datatypes = 1;
  // The specified codec name.
  required string codec = 2;
}

// Rebases memory allocations.
//
// Existing memory allocations are matched according to the supplied
// pattern.
//
// For each matching allocation, the pass runs through the
// allocation's location: for each device, it binds dev.0, dev.1,
// dev.2, &c to the constant portion of the corresponding unit.
// Additionally, it binds the allocation's current offset as "offset".
//
// Using these bindings, the supplied "offset" affine is partially
// evaluated, and the allocation's offset is set to the result.
message MemRebasePass {
  // The location name of the memory allocations to rebase.
  required string pattern = 1;
  // The offset to use for the rewritten refinement.
  required stripe.proto.Affine offset = 3;
}

// Packages blocks into subblocks, propagating refinements.
message PackagePass {
  // Indicates the blocks to be packaged.
  repeated string reqs = 1;
  repeated string package_set = 2;
  repeated string subblock_set = 3;
}

message SubgroupPass {
  // Which blocks to do subgroup blocking on
  repeated string reqs = 1;
  // Memory latency
  required int64 mem_latency = 2;
  // Cache latency
  required int64 cache_latency = 3;
  // Maximum memory (for entire group)
  repeated int64 max_mem = 4;
  // Maximum size of each subgroup
  repeated int64 subgroup_sizes = 5;
  // The threshold of computations/memory_accesses
  required double mem_bounded_threshold = 6;
  // Size of each subgroup
  optional int64 subgroup_size = 7 [default = 8];
  // Cache width
  optional int64 cache_width = 8 [default = 0];
  // Cache size
  required uint64 cache_size = 9;
  // Limit of inner block operations
  required uint64 inner_stmts_limit = 10;
}

// Rewrites refinement and block locations.
//
// For each location matching a rewrite prefix, the matched prefix is
// replaced with the target device list.
message RewriteLocationsPass {
  message Rewrite {
    // The prefix of the locations to rewrite.
    repeated stripe.proto.Device prefix = 1;

    // The new device list to replace the prefix with.
    repeated stripe.proto.Device target = 2;
  }
  repeated Rewrite rewrites = 1;
}

// Remove redundant constraints, impossible blocks, and reduce the index
// range  (light-weight).
message LightConstraintReductionPass {
  repeated string reqs = 1;
  repeated string skip_idxs = 2;
}

// Remove redundant constraints, impossible blocks, and reduce the index
// range using integer linear programming.
message IlpConstraintReductionPass {
  repeated string reqs = 1;
  repeated string skip_idxs = 2;
}

// Detect and extract properties from blocks and store the results onto the
// specified attrs.
message PatternPass {
  // Run the pattern pass over blocks that have these tags.
  repeated string reqs = 1;
  // The pattern to be matched is specified using a prolog-like DSL.
  required string pattern = 2;
  // A mapping where the value specifies which matched variable to extract and
  // the key specifies the attribute name to place the extacted value.
  map<string, string> set_vars = 3;
}

// Change the kernels' tags for the following optimizations.
message KernelTagPass {
  repeated string reqs = 1;
}

// Mark #temp_var for the multiple used variables
message TempVarPass {
  repeated string reqs = 1;
}

// Propagate constant tensors.
message ConstantPropagatePass {
}

// Remove constant tensor and replace the corresponding loads with constants
message ConstTensorPass {
  repeated string reqs = 1;
}

// Reorder the strides of allocations and constants to maximize divisibility of
// low stride elements
message FixStridesPass {
  repeated string reqs = 1;
}

// Reorder the index in order to make the low bits of the thread ID be
// correspond to the low stride
message IdxOrderPass {
  repeated string reqs = 1;
}
