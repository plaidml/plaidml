diff --git a/include/mlir/IR/OpImplementation.h b/include/mlir/IR/OpImplementation.h
index 666a90ec..8aeee0cd 100644
--- a/include/mlir/IR/OpImplementation.h
+++ b/include/mlir/IR/OpImplementation.h
@@ -629,6 +629,10 @@ public:
   /// OpAsmInterface.td#getAsmResultNames for usage details and documentation.
   virtual void getAsmResultNames(Operation *op,
                                  OpAsmSetValueNameFn setNameFn) const {}
+  /// Get a special name to use when printing the entry block arguments for any
+  /// region contained by an Op in this dialect.  The desired name should be
+  /// streamed into 'os'.  If the result is empty, the default name will be used.
+  virtual void getRegionArgumentName(BlockArgument *arg, raw_ostream &os) const {}
 };
 
 //===--------------------------------------------------------------------===//
diff --git a/lib/IR/AsmPrinter.cpp b/lib/IR/AsmPrinter.cpp
index 655a7761..5a664701 100644
--- a/lib/IR/AsmPrinter.cpp
+++ b/lib/IR/AsmPrinter.cpp
@@ -1604,12 +1604,22 @@ void OperationPrinter::numberValuesInBlock(Block &block) {
 
   // Number the block arguments. We give entry block arguments a special name
   // 'arg'.
-  SmallString<32> specialNameBuffer(isEntryBlock ? "arg" : "");
-  llvm::raw_svector_ostream specialName(specialNameBuffer);
+  const OpAsmDialectInterface* interface = nullptr;
+  if (isEntryBlock && state) {
+    if (auto* op = block.getParentOp()) {
+      interface = state->getOpAsmInterface(op->getDialect());
+    }
+  }
   for (auto *arg : block.getArguments()) {
+    SmallString<32> specialNameBuffer;
+    llvm::raw_svector_ostream specialName(specialNameBuffer);
     if (isEntryBlock) {
-      specialNameBuffer.resize(strlen("arg"));
-      specialName << nextArgumentID++;
+      if (interface) {
+        interface->getRegionArgumentName(arg, specialName);
+      }
+      if (specialName.str() == "") {
+        specialName << "arg" << nextArgumentID++;
+      }
     }
     setValueName(arg, specialName.str());
   }
