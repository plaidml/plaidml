{{=$ $=}}
// Copyright 2017-2018 Intel Corporation. 
// This file was produced by astgen using the base template

#pragma once

$#systeminc$
#include <$.$>
$/systeminc$

$#userinc$
#include "$.$"
$/userinc$

$#namespace$
namespace $.$ {
$/namespace$

namespace impl {

class AllBase {
 public:
  virtual ~AllBase() {}
};

// Define the hierarchy of node groups
$#groups$
class $group$Object : public $#parent$$.$Object$/parent$$^parent$AllBase$/parent$ {
};

$/groups$
// Predeclare all the the types for specific AST node types
$#nodes$
class $node$Object;  
$/nodes$

// Make a way to validate primitive types
template<typename T> struct IsPrimitive : public std::integral_constant<bool, false> {};

$#primitives$
template<> struct IsPrimitive<$.$> : public std::integral_constant<bool, true> {};
$/primitives$

// Define the type for wrapping primitives
template<typename T>
class PrimitiveWrapper : public AllBase, public vertexai::Interned<PrimitiveWrapper<T>> {
 public:
  PrimitiveWrapper(const T& value) : value_(value) {}
  const T& value() const { return value_; }

 private:
  T value_;
};

// The base type for matchers
class AnyMatcher {
 public:
  virtual ~AnyMatcher() {}
  virtual bool Match(const std::shared_ptr<AllBase>& value) const = 0;
};

}  // namespace impl

// Now we declare our 'public' types

// Typedef shared pointers holding the groups as public types
$#groups$
typedef std::shared_ptr<impl::$group$Object> $group$;
$/groups$

// Same for the nodes.
$#nodes$
typedef std::shared_ptr<impl::$node$Object> $node$;
$/nodes$

// Typedef shared pointers for AnyMatcher as user type
typedef std::shared_ptr<impl::AnyMatcher> Matcher;

// Next, we add suppport for variables
// We make a default implementation fail 
template<typename T, typename Enable = void>
class Variable {
 private:
  Variable() {}
};

// Next we overload for valid primitive types
template<typename T>
class Variable<T, typename std::enable_if<impl::IsPrimitive<T>::value>::type> : public impl::AnyMatcher {
 private:
  typedef impl::PrimitiveWrapper<T> object_type;
  typedef std::shared_ptr<object_type> holder_type;
  struct Inner {
    holder_type inner;
  };

 public:
  Variable() : value_(new Inner()) {}
  explicit operator bool() { return bool(value_->inner); }
  void Set(const T& v) { value_->inner = object_type::make(v); }
  bool Match(const std::shared_ptr<impl::AllBase>& value) const final {
    auto my_value = std::dynamic_pointer_cast<object_type>(value);
    if (!my_value) { return false; }
    if (value_->inner && value_->inner != my_value) { return false; }
    value_->inner = my_value;
    return true;
  }
  void Clear() { value_->inner.reset(); }
  const T& operator*() const { return value_->inner->value(); }
  const T* operator->() const { return &value_->inner->value(); }

 private:
  std::shared_ptr<Inner> value_;
};

// We overload for nodes, which are all shared_ptr types
template<typename N>
class Variable<std::shared_ptr<N>,
    typename std::enable_if<std::is_base_of<impl::$toplevel$Object, N>::value>::type> : public impl::AnyMatcher {
 private:
  typedef N object_type;
  typedef std::shared_ptr<object_type> holder_type;
  struct Inner {
    holder_type inner;
  };

 public:
  Variable() : value_(new Inner()) {}
  explicit operator bool() { return bool(value_->inner); }
  void Set(const holder_type& v) { value_->inner = v; }
  bool Match(const std::shared_ptr<impl::AllBase>& value) const final {
    auto my_value = std::dynamic_pointer_cast<object_type>(value);
    if (!my_value) { return false; }
    if (value_->inner && value_->inner != my_value) { return false; }
    value_->inner = my_value;
    return true;
  }
  void Clear() { value_->inner.reset(); }
  const N& operator*() const { return *value_->inner; }
  const holder_type& operator->() const { return value_->inner; }

 private:
  std::shared_ptr<Inner> value_;
};

// At this point, we've introduced all user defined types, now back to implementation details
namespace impl {

// Some helper methods for detecting matchers

// We make a template that checks if X is 'matcher like'
// By default, it's true if X is convertable to a matcher 
template<typename Type>
struct matcher_like 
     : public std::integral_constant<bool, std::is_convertible<Type, Matcher>::value>
{};

// We overload it to make variables also 'matcher like'
template<typename T>
struct matcher_like<Variable<T>> : public std::integral_constant<bool, true> {};

// Next we declare a varargs bool
template <bool...> struct bool_pack;

// Then we define a cute non-recursive way to check if all entries in the bool_pack are false
template <bool... v>
using all_false = std::is_same<bool_pack<false, v...>, bool_pack<v..., false>>;

// We use that to make a quick way to see if none of the params are matchers
template<typename... Args>
using none_matchers = all_false<matcher_like<Args>::value...>;

// Or the not of that: if any of the params are matchers
template <typename... Args>
using any_matchers = std::integral_constant<bool, !none_matchers<Args...>::value>;

// Now, we make some functions to convert things to matchers

// First we make an exact matcher helper class for any node
class ExactMatcher : public AnyMatcher {
 public:
  ExactMatcher(const std::shared_ptr<AllBase>& node) : node_(node) {}

  bool Match(const std::shared_ptr<AllBase>& value) const final {
    return value == node_; 
  }

 private:
  std::shared_ptr<AllBase> node_;
};

// By default, fail
template<typename P, typename V, typename Enable = void> 
struct ConvertToMatcher {};

// For primitives, convert anything via construction
template<typename P, typename V>
struct ConvertToMatcher<P, V, typename std::enable_if<IsPrimitive<P>::value && std::is_convertible<V, P>::value>::type> {
  static Matcher apply(const V& v) {
    return Matcher(new ExactMatcher(PrimitiveWrapper<P>::make(P(v))));
  }
};

// For node types, convert as well
template<typename N, typename V>
struct ConvertToMatcher<std::shared_ptr<N>, std::shared_ptr<V>, typename std::enable_if<
    std::is_base_of<impl::$toplevel$Object, N>::value && std::is_base_of<impl::$toplevel$Object, V>::value>::type> {
  static Matcher apply(const std::shared_ptr<V>& v) {
    return Matcher(new ExactMatcher(v));
  }
};

// If it's a variable, in which case make a variable matcher
template<typename T, typename V>
struct ConvertToMatcher<T, Variable<V, void>, void> {
  static Matcher apply(const Variable<V>& v) {
    return Matcher(new Variable<V>(v));
  }
};

// Or it's already a matcher, in which case, pass it along
template<typename T>
struct ConvertToMatcher<T, Matcher, void> {
  static Matcher apply(const Matcher& m) {
    return m;
  }
};

// Now, we build each of the node object and matcher classes

$#nodes$
class $node$Object : public $group$Object, public vertexai::Interned<$node$Object> {
 public:
  $node$Object(
  $#elements$
      const std::shared_ptr<$&hold_type$>& $field$$comma$
  $/elements$
  ) : 
  $#elements$
      $field$_($field$)$comma$
  $/elements$
  {}

  bool operator<(const $node$Object& rhs) const {
  $#elements$
    if ($field$_ != rhs.$field$_) { return $field$_ < rhs.$field$_; }
    return false;
  $/elements$
  }

  $#elements$
  $#is_primitive$
  const $user_type$& $field$() const { return $field$_->value(); }
  $/is_primitive$
  $^is_primitive$
  const $user_type$& $field$() const { return $field$_; }
  $/is_primitive$
  $/elements$

 private:
  friend class $node$NodeMatcher;
  $#elements$
  std::shared_ptr<$&hold_type$> $field$_;
  $/elements$
};

class $node$NodeMatcher : public AnyMatcher {
 public:
  $node$NodeMatcher($#elements$const Matcher& $field$$comma$$/elements$)
    : $#elements$$field$_($field$)$comma$ $/elements${}
    
  bool Match(const std::shared_ptr<AllBase>& value) const final {
    auto my_value = std::dynamic_pointer_cast<$node$Object>(value);
    $#elements$
    if (!$field$_->Match(my_value->$field$_)) { return false; }
    $/elements$
    return true;
  }

 private:
  $#elements$
  Matcher $field$_;
  $/elements$
};

$/nodes$
}  // namespace impl

// Next, for each node type, we make two free functions.  One makes nodes, the other makes matchers.
// The first we leave unqualified, while the second we make generic and require it (via enable_if)
// to have at least one 'matcher' input.

$#nodes$
$node$ _$node$(
  $#elements$
      const $user_type$& $field$$comma$
  $/elements$
  ) {
  return impl::$node$Object::make(
  $#elements$
  $#is_primitive$
      impl::PrimitiveWrapper<$user_type$>::make($field$)$comma$
  $/is_primitive$
  $^is_primitive$
      $field$$comma$
  $/is_primitive$
  $/elements$
  );
}

template<
  $#elements$
  typename T_$field$$comma$
  $/elements$
>
typename std::enable_if<impl::any_matchers<
  $#elements$
  T_$field$$comma$
  $/elements$
>::value, Matcher>::type
  _$node$(
  $#elements$
      const T_$field$& $field$$comma$
  $/elements$
  ) {
  return Matcher(new impl::$node$NodeMatcher(
    $#elements$
    impl::ConvertToMatcher<$user_type$, T_$field$>::apply($field$)$comma$
    $/elements$
  ));
}

$/nodes$

$#revnamespace$
}  // namespace $.$
$/revnamespace$
