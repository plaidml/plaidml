syntax = "proto3";

package vertexai.context.proto;

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";

option java_package = "ai.vertex.context";
option java_outer_classname = "ContextProtos";

// An RPC status.
message Status {
  enum Code {
    OK = 0;
    CANCELLED = 1;
    UNKNOWN = 2;
    INVALID_ARGUMENT = 3;
    DEADLINE_EXCEEDED = 4;
    NOT_FOUND = 5;
    ALREADY_EXISTS = 6;
    PERMISSION_DENIED = 7;
    UNAUTHENTICATED = 16;
    RESOURCE_EXHAUSTED = 8;
    FAILED_PRECONDITION = 9;
    ABORTED = 10;
    OUT_OF_RANGE = 11;
    UNIMPLEMENTED = 12;
    INTERNAL = 13;
    UNAVAILABLE = 14;
    DATA_LOSS = 15;
  }

  Code code = 1;
  string details = 2;
}

message RpcRequest {
  string peer = 1;
  google.protobuf.Any request = 2;
}
 
message RpcResponse {
  Status status = 1;
  google.protobuf.Any response = 2;
}

// Identifies an ongoing activity.
message ActivityID {
  // The index of the activity within its stream.
  uint64 index = 1;

  // The ID of the event stream.
  // This may be absent, indicating "the current stream".
  bytes stream_uuid = 2;
}

// Identifies a clock.
message ClockID {
  // The index of the clock within the stream.
  uint64 index = 1;
}

// Represents a single event.
// An activity is typically described by multiple events that
// have the same activity ID.
message Event {
  // The parent of this event's activity (what was going on when this activity started).
  ActivityID parent_id = 1;

  // The instance of this activity (e.g. a particular run of some RPC).
  ActivityID activity_id = 2;

  // The verb of this activity (e.g. the RPC being run).
  string verb = 3;

  // Identifies the particular clock instance used to measure this activity.
  ClockID clock_id = 4;

  // The activity's start and end times, as offsets from the clock's epoch.
  //
  // Note that activity events may be split, with the initial start event
  // (missing the end time) followed later by a completion event (containing
  // only the instance UUID and the end time).
  google.protobuf.Duration start_time = 5;
  google.protobuf.Duration end_time = 6;

  // Activity metadata.
  repeated google.protobuf.Any metadata = 7;

  // Identifies the domain of this event -- i.e. the process in which the event takes place.
  ActivityID domain_id = 8;
}
