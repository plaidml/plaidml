#!/usr/bin/env python

import argparse
import os
import pathlib
import platform
import shutil
import subprocess
import sys

BAZELRC = '.bazelrc.configure'


def is_linux():
    return platform.system() == 'Linux'


def is_macos():
    return platform.system() == 'Darwin'


def is_windows():
    return platform.system() == 'Windows'


def printf(*args, **kwargs):
    excludes_env = {key: kwargs[key] for key in kwargs if key not in ['env']}
    if excludes_env:
        print(*args, excludes_env)
    else:
        print(*args)
    sys.stdout.flush()


def run(cmd, **kwargs):
    printf(cmd, **kwargs)
    subprocess.run(cmd, **kwargs)


class Configure:

    def __init__(self):
        conda = shutil.which('conda')
        if not conda:
            print('Please install conda.')
            print('See: https://docs.conda.io/projects/conda/en/latest/user-guide/install')
            sys.exit(1)
        self.conda = pathlib.Path(conda)
        self.this_dir = pathlib.Path(__file__).absolute().parent
        self.cenv_dir = self.this_dir / '.cenv'
        print('conda found at: {}'.format(self.conda))

        # reset custom config settings
        open(BAZELRC, 'w').close()

    def is_activated(self):
        return os.getenv('CONDA_PREFIX') == str(self.cenv_dir)

    def activate_conda(self):
        printf('Activating conda environment')
        env = os.environ.copy()
        env['SKIP_BOOTSTRAP'] = '1'
        run([
            self.conda,
            'run',
            '--no-capture-output',
            '-p',
            self.cenv_dir,
            'python',
            __file__,
        ],
            check=True,
            env=env)

    def configure_conda(self, skip_cenv=None):
        if is_windows():
            env_file = self.this_dir / 'environment-windows.yml'
        else:
            env_file = self.this_dir / 'environment.yml'

        if self.cenv_dir.exists():
            print('Updating conda environment from: {}'.format(env_file))
            cmd = [
                str(self.conda),
                'env',
                'update',
                '-f',
                str(env_file),
                '-p',
                str(self.cenv_dir),
            ]
            run(cmd, check=True, stdout=subprocess.DEVNULL)
        else:
            if not skip_cenv:
                print('Creating conda environment from: {}'.format(env_file))
                cmd = [
                    str(self.conda),
                    'env',
                    'create',
                    '-f',
                    str(env_file),
                    '-p',
                    str(self.cenv_dir),
                ]
                run(cmd, check=True, stdout=subprocess.DEVNULL)

    def configure_precommit(self):
        if is_windows():
            search_path = self.cenv_dir / 'Scripts'
        else:
            search_path = self.cenv_dir / 'bin'
        print()
        print('Searching for pre-commit in: {}'.format(search_path))
        pre_commit = shutil.which('pre-commit', path=str(search_path))
        if not pre_commit:
            print('pre-commit could not be found.')
            print('Is your conda environment created and up to date?')
            sys.exit(1)
        run([pre_commit, 'install'], check=True)

    def configure_bazelisk(self):
        bazelisk = shutil.which('bazelisk')
        if not bazelisk:
            print('Please install bazelisk from:')
            print('https://github.com/bazelbuild/bazelisk')
            sys.exit(1)
        print()
        print('bazelisk version')
        run([bazelisk, 'version'], check=True)

    def configure_cmake(self, args):
        build_dir = pathlib.Path(f'build-{args.target}').resolve() / args.type
        openvino_dir = build_dir / '_deps/openvino-build'
        temp_dir = args.temp / args.target
        fc_dir = temp_dir / 'fc'

        cmd = [
            'cmake',
            '-Svendor/openvino',
            f'-B{openvino_dir}',
            '-GNinja',
            f'-DCMAKE_BUILD_TYPE={args.type}',
            '-DCMAKE_C_COMPILER_LAUNCHER=ccache',
            '-DCMAKE_CXX_COMPILER_LAUNCHER=ccache',
            '-DCMAKE_CXX_FLAGS=-w',
            '-DENABLE_CLDNN=OFF',
            '-DENABLE_DATA=OFF',
            '-DENABLE_FUNCTIONAL_TESTS=ON',
            '-DENABLE_GNA=OFF',
            '-DENABLE_MKL_DNN=OFF',
            '-DENABLE_MYRIAD=OFF',
            '-DENABLE_SPEECH_DEMO=OFF',
            '-DENABLE_TESTS=ON',
            '-DENABLE_VPU=OFF',
            f'-DFETCHCONTENT_BASE_DIR={fc_dir}',
            '-DFETCHCONTENT_QUIET=OFF',
            f'-DOUTPUT_ROOT={build_dir}',
        ]
        run(cmd, check=True)

        run(['ninja', '-C', openvino_dir], check=True)

        cmd = [
            'cmake',
            '-S.',
            f'-B{build_dir}',
            '-GNinja',
            f'-DCMAKE_BUILD_TYPE={args.type}',
            '-DCMAKE_C_COMPILER_LAUNCHER=ccache',
            '-DCMAKE_CXX_COMPILER_LAUNCHER=ccache',
            f'-DCPM_SOURCE_CACHE={temp_dir / "cpm"}',
            f'-DFETCHCONTENT_BASE_DIR={fc_dir}',
            '-DFETCHCONTENT_QUIET=OFF',
            f'-DInferenceEngineDeveloperPackage_DIR={openvino_dir}',
        ]
        if args.local_llvm:
            cmd.append('-DLOCAL_LLVM_DIR={}'.format(args.local_llvm))
        else:
            cmd.append('-ULOCAL_LLVM_DIR')
        run(cmd, check=True)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--ci', action='store_true', help='Enable CI mode')
    parser.add_argument('--skip_bazelisk',
                        action='store_true',
                        help='Skip the bazelisk configuration step?')
    parser.add_argument('--skip_conda_env',
                        action='store_true',
                        help='Skip the conda environment creation step?')
    parser.add_argument('--skip_precommit',
                        action='store_true',
                        help='Skip the precommit configuration step?')
    parser.add_argument('--local_llvm', help='Configure LOCAL_LLVML_DIR', type=pathlib.Path)
    parser.add_argument('--type',
                        choices=['Debug', 'Release', 'RelWithDebInfo'],
                        default='Release',
                        help='Configures CMAKE_BUILD_TYPE')
    parser.add_argument('--target',
                        choices=['aarch64', 'x86_64'],
                        default='x86_64',
                        help='set the target')
    parser.add_argument('--temp',
                        type=pathlib.Path,
                        default='/tmp/plaidml',
                        help='Configures the temporary directory for cached assets.')
    args = parser.parse_args()

    print("Configuring PlaidML build environment")
    print()

    cfg = Configure()

    if args.ci:
        cfg.configure_cmake(args)
    else:
        if not cfg.is_activated():
            if not args.skip_conda_env:
                cfg.configure_conda()
            cfg.activate_conda()
        else:
            if not args.skip_precommit:
                cfg.configure_precommit()
            if not args.skip_bazelisk:
                cfg.configure_bazelisk()
            cfg.configure_cmake(args)

        print()
        print("Your build is configured.")
        print("Use the following to run all unit tests:")
        print()
        print("bazelisk test //...")
        print()


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
